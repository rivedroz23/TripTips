</br>
<button class = 'mapbtn' onclick="window.location.href = '/location/city/<%= city.id %>';">Back to feed</button>

<h3><%= city.name  %></h3>
<!-- <%= JSON.stringify(locations)â€© %>  -->
<div id="map">
</div>

<% var locallocations = JSON.stringify(locations); %>
<script> 
   var locations = <%- locallocations  %>;
   //Transform coordinates object from string values to array of numbers and remove whitespace for Mapbox. 
   //Pass coorindates into .map method and run split function on initial array. 
   //Take returned array and pass it into another .map method and run parseFloat function on 
   //Array returned by previous .map call. Final array is returned as coordinates variable.
   //Need to read more about .map and lambdas AND fat arrow notation => 
   var coordinates = locations
        .map(l => l.coordinates.split(','))
        .map(cp => cp
            .map(cs => parseFloat(cs)));
            
     
    
    /*let markerCoords = [
        [-122.331976,47.602331],
        [-122.354963,47.616444],
        [-122.333997,47.601342]
    ]*/

mapboxgl.accessToken = 'pk.eyJ1Ijoicml2ZWRyb3oyMyIsImEiOiJjanhleTdvOTkwM2hhM3RvN3d1eDhwbWx5In0.NvMVM2quRBrxFO8ERJdQyQ';



        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: coordinates[0],
            zoom: 9
        })
    
    
        const geoJSON = {
            "type": "FeatureCollection",
            "features": coordinates.map(function (coord) {
                let marker = {
                    "type": "Feature",
                    "properties": {
                        "iconsize": [60, 60]
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": coord
                    }
                }
                return marker
            })
        }
    
        geoJSON.features.forEach(function (feature) {
            new mapboxgl.Marker({ anchor: 'center' })
                .setLngLat(feature.geometry.coordinates)
                .addTo(map)
        })
    
    
    
        map.on('load', function () {
            let layers = map.getStyle().layers;
            let labelLayerId;
            for (let i = 0; i < layers.length; i++) {
                if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
                    labelLayerId = layers[i].id;
                    break;
                }
            }
            
    
            map.addLayer({
                "id": "3d-buildings",
                "source": "composite",
                "source-layer": "building",
                "filter": ["==", "extrude", "true"],
                "type": "fill-extrusion",
                "minzoom": 12,
                "paint": {
                    "fill-extrusion-color": "#009e60",
                    "fill-extrusion-height": [
                        "interpolate",
                        ["linear"],
                        ["zoom"],
                        12,
                        0,
                        12.05,
                        ["get", "height"]
                    ],
                    "fill-extrusion-base": [
                        "interpolate",
                        ["linear"],
                        ["zoom"],
                        12,
                        0,
                        12.05,
                        ["get", "min_height"]
                    ],
                    "fill-extrusion-opacity": 0.6
                }
            }, labelLayerId)

            map.on('click', function(e) {
                console.log('click', e); 
                var popup = new mapboxgl.Popup({offset:[0,-15]})
                    .setLngLat(feature.geometry.coordinates)
                    .setHTML('<h1>' + feature.properties.title + '</h1>')
                    .setLngLat(feature.geometry.coordinates)
                    .addTo(map)
                var features = map.queryRenderedFeatures(e.point, {
                    layers: ['3d-buildings']
                })
                console.log(features); 
                if (!features.length) 
                    return; 

                var feature = features[0]
                consol.log('after feature', feature); 
                var popup = new mapboxgl.Popup({offset:[0,-15]})
                    .setLngLat(feature.geometry.coordinates)
                    .setHTML('<h1>' + feature.properties.title + '</h1>')
                    .setLngLat(feature.geometry.coordinates)
                    .addTo(map)

            })
        });
    
    </script> 



